// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  phone         String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  CASHIER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model RestaurantCity {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  localities Locality[] // Localidades dentro da cidade
}

model Address {
  id          String   @id @default(uuid())
  userId      String?
  street      String
  number      String
  city        String?
  state       String?
  zipCode     String?
  localityId  String?
  isDefault   Boolean  @default(false)
  reference   String? // (ex.: "fundos, portão preto")
  observation String? // (ex.: "apertar campainha")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]
  locality Locality? @relation(fields: [localityId], references: [id], onDelete: Cascade)
}

model Locality {
  id          String   @id @default(uuid())
  name        String // Nome da localidade (ex.: "Centro", "Ipiranga")
  deliveryFee Float // Valor do frete para essa localidade (ex.: 5.00, 7.00)
  cityId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city      RestaurantCity @relation(fields: [cityId], references: [id], onDelete: Cascade)
  addresses Address[]
}

model Order {
  id             String        @id @default(uuid())
  orderNumber    String        @unique
  userId         String?
  addressId      String
  total          Float
  deliveryFee    Float? // valor do frete (null se retirada no local)
  status         Status        @default(PENDING) // Ex.: "pending", "delivered", "canceled"
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  paymentMethod  PaymentMethod
  requiresChange Boolean? // precisa de troco? (null se não for CASH) 
  changeFor      Float? // quanto de troco? (null se não for CASH)
  isDelivery     Boolean       @default(true)
  guestName      String?
  guestPhone     String?
  isGuestOrder   Boolean       @default(false)

  user    User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float?
  categoryId  String
  discount    Float? // Opcional, null se não houver desconto
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isHalfHalf  Boolean? // campo para indicar se o produto é meio a meio

  category         Category    @relation(fields: [categoryId], references: [id])
  orderItems       OrderItem[] // Produtos aparecem em itens de pedido
  Extras           Extra[]
  Size             Size[]
  firstHalfPizzas  HalfHalf[]  @relation("FirstHalf") // Relação oposta para firstHalf
  secondHalfPizzas HalfHalf[]  @relation("SecondHalf") // Relação oposta para secondHalf
}

model Size {
  id         String      @id @default(uuid())
  name       String // Ex.: "Pequeno", "Médio", "Grande"
  price      Float
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[] // Tamanhos aparecem em itens de pedido
}

model HalfHalf {
  id           String    @id @default(uuid())
  orderItemId  String    @unique
  orderItem    OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  firstHalfId  String // Primeiro sabor
  firstHalf    Product   @relation("FirstHalf", fields: [firstHalfId], references: [id])
  secondHalfId String // Segundo sabor
  secondHalf   Product   @relation("SecondHalf", fields: [secondHalfId], references: [id])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  priceAtTime Float // Preço no momento do pedido
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  observation String?

  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id])
  orderExtras OrderExtra[] // Lista de extras associados a este item
  Size        Size?        @relation(fields: [sizeId], references: [id])
  sizeId      String?
  HalfHalf    HalfHalf?
}

enum Status {
  PENDING
  IN_PREPARATION
  IN_TRANSIT
  DELIVERED
  CANCELED
}

model Extra {
  id        String   @id @default(uuid())
  name      String // Ex.: "Queijo extra", "Pepperoni"
  price     Float // Preço adicional do ingrediente
  productId String // Relaciona o extra a um produto específico
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderExtras OrderExtra[] // Relaciona com os itens de pedido que usam esse extra
}

model OrderExtra {
  id          String   @id @default(uuid())
  orderItemId String // Relaciona ao item do pedido
  extraId     String // Relaciona ao ingrediente adicional
  quantity    Int // Quantidade do extra (ex.: 2x Queijo extra)
  priceAtTime Float // Preço do extra no momento do pedido
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  extra     Extra     @relation(fields: [extraId], references: [id])
}
