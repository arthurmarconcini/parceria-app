// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[] // Um usuário pode ter vários endereços
  orders    Order[] // Um usuário pode ter vários pedidos
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  street    String
  number    String
  city      String?
  state     String?
  zipCode   String
  isDefault Boolean  @default(false) // Apenas um endereço é padrão
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[] // Endereço usado em pedidos
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  addressId String
  total     Float
  status    Status   @default(PENDING) // Ex.: "pending", "delivered", "canceled"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[] // Itens do pedido
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] // Uma categoria tem vários produtos
}

model Product {
  id         String   @id @default(uuid())
  name       String
  price      Float
  categoryId String
  discount   Float? // Opcional, null se não houver desconto
  imageUrl   String? // Novo campo para URL da imagem (opcional)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[] // Produtos aparecem em itens de pedido
  Extras     Extra[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  priceAtTime Float // Preço no momento do pedido
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  observation String? // Observação do cliente

  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id])
  orderExtras OrderExtra[] // Lista de extras associados a este item
}

enum Status {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELED
}

model Extra {
  id        String   @id @default(uuid())
  name      String // Ex.: "Queijo extra", "Pepperoni"
  price     Float // Preço adicional do ingrediente
  productId String // Relaciona o extra a um produto específico
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderExtras OrderExtra[] // Relaciona com os itens de pedido que usam esse extra
}

model OrderExtra {
  id          String   @id @default(uuid())
  orderItemId String // Relaciona ao item do pedido
  extraId     String // Relaciona ao ingrediente adicional
  quantity    Int // Quantidade do extra (ex.: 2x Queijo extra)
  priceAtTime Float // Preço do extra no momento do pedido
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  extra     Extra     @relation(fields: [extraId], references: [id])
}
